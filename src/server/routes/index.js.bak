const express = require('express');
const passportConfig = require('../passport/index');
const homeController = require('../controllers/home');
const userController = require('../controllers/user');
const apiController = require('../controllers/api');
const codeController = require('../controllers/code');
const codeSetController = require('../controllers/codeSet');

const router = express.Router();

// const isAdmin = function (req, res, next) {
//   if (req.user.roles.indexOf('admin') > -1) return next();
//   res.redirect('/login');
// };

// The middleware to set up the parameters for the authenticate middleware.
const checkReturnTo = function checkReturnTo(req, res, next) {
  // Maybe unnecessary, but just to be sure.
  req.session = req.session || {};

  req.session.returnTo = req.query.returnTo;

  next();
};

module.exports = function routeIndex(passport) {
  /* GET login page. */
  router.get('/', homeController.index);
  router.get('/create', homeController.create);
  router.get('/search', homeController.search);
  router.get('/validate', homeController.validate);
  router.get('/enhance', homeController.enhance);
  router.get('/login', userController.getLogin);
  router.get('/forgot', userController.getForgot);
  router.get('/signup', userController.getSignup);

  router.get('/account', passportConfig.isAuthenticated, userController.getAccount);
  router.post('/account/profile', passportConfig.isAuthenticated, userController.postUpdateProfile);
  router.post('/account/password', passportConfig.isAuthenticated, userController.postUpdatePassword);
  router.post('/account/delete', passportConfig.isAuthenticated, userController.postDeleteAccount);
  router.get('/account/unlink/:provider', passportConfig.isAuthenticated, userController.getOauthUnlink);

  router.get('/api/github', passportConfig.isAuthenticated, passportConfig.isAuthorized, apiController.getGithub);

  
  return router;
};
